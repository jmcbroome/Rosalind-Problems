#Jakob McBroome
#BME 205

def kmer_generator(length, seq):
    '''Takes an input string and produces all linear combinations of substrings of length given, e.g. "2, ACG" would output "AC, "CG" in a list format.'''
    kmer_list = []
    for index in range(0, len(seq)):
        #this if statement is included for the last few symbols; without it, the final handful of entries (number equaling the given length) would be truncated versions because of the indexing to the end, even if the end is closer than the length requested.
        if len(seq[index:index+length]) == length:
            kmer_list.append(seq[index:index+length])
    return kmer_list

kmer_generator(5, "CAATCCAAC")

for entry in kmer_generator(50, "GATACGGTTGCATTACATCCGAGAAGCTGGGATGCCTCACCTATCCATTCACCCTTTGCAGTCGTGTGAGACTAACCGGAGTGCGTCCAGAAATGCTTGCCTCGACATTGCCGGCCATCGTAGGGTGCAGCCTAGCACGCGGTTGCTATGCGGGGGTACCCGGCGCTAGCGCAACTTAATGCCTCCACATCCGTCAGGCGTTTAAGAAGCGCCAAGGGCTACGTGATTATGTACGTGAGGATGTAGTCCACCACGAAGATTGGCAAGCGTGGTTGACGACTCATAACGACGGTACTTTAGTGAAGCTGGAGGACCCCCGCGGCGTGTGATGATCCGCTCGCCGCGATATTACCCACACACTTGTCACTAACCCGTTAGAGGCTATGCAACACTTATTGAAGAAGCCGTTACGCCTGGCTAAACCAAGTTCTGGTCTCTTGCTACGTGAGTCGGAGACTTGATTATCGCCCACGTACGGTGCTCCGTATCACCCTAGAGCGTGTAGAGGGTTGAGCGTCCCTAAAAGACTGTTACACAAGGTGGTCGTATTACACACGATATTTCGATCGATTCGAGGCTGTGAGTTCTCCTCTATGGAAGGCTAACACATTCCCCTCATGCTTGAATTGCACTATAACCGTTGGGGTCAACCCCTATCCTAGTTAGCCTCTAGACTCGCGGCGCCCGAGACAAGTATCAAGATAGCCAAGCTCTTATAATCCATATGTCAGATCCAAACCATTCCGGTACCCATCCAATCTTTCGTATATCTCCGAACTGGGAGGCCTGTTCGTGCCCGACTCGAGAGAATCATTCTGTCTATACCCATAGCCTTAATCCTTGCGCTGAAGAACTAACTTACGCAACACAGAGCCGCCATGACGGACCGGGGCTTCGCTATCCATTGCTGGAGTGCCGGTTTAAACGATGGGGTTGCTCCAATTTGACACCAATCGATATTGTATCGACGTTCAGAGTCGAACTTTAGCCGCTACGACCC"):
    print(entry)

